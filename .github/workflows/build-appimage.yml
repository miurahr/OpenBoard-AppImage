name: Build AppImage release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-appimage:
    runs-on: ubuntu-16.04
    steps:
    - uses: actions/checkout@v1
    - name: Detect release tag
      id: vars
      run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}
    - name: Checkout OpenBoard
      uses: actions/checkout@v2
      with:
        repository: 'OpenBoard-org/OpenBoard'
        path: 'OpenBoard'
        ref: ${{ github.ref }}
    - name: patch OpenBoard
      run: |
        patch -p1 -i ../patches/0001-Modify-directory-hierarchy-based-on-FHS.patch
      working-directory: 'OpenBoard'
    - name: Checkout OpenBoard-ThirdParty
      uses: actions/checkout@v2
      with:
        repository: 'OpenBoard-org/OpenBoard-ThirdParty'
        path: 'OpenBoard-ThirdParty'
    - name: Checkout OpenBoard-Importer
      uses: actions/checkout@v2
      with:
        repository: 'OpenBoard-org/OpenBoard-Importer'
        path: 'OpenBoard-Importer'
    - name: install Qt 5.5
      uses: jurplel/install-qt-action@v2
      with:
        version: 5.5
        host: linux
        target: desktop
        modules: all
    - name: Install linuxdeploy
      uses: miurahr/install-linuxdeploy-action@v1.2.0
      with:
        plugins: qt appimage
    - name: install dependencies
      run: |
        sudo apt-get -y install imagemagick libopenjpeg-dev libschroedinger-dev libssl-dev libmysqlclient-dev libgeoclue-dev libgstreamer0.10-0 libgstreamer0.10-dev libgstreamer-plugins-base0.10-dev libavformat-dev libavresample-dev libswscale-dev libavcodec-dev libxt-dev libpaper-dev libva-dev libasound2-dev libsdl1.2-dev libx264-dev libvpx-dev libvorbis-dev libtheora-dev libopus-dev libmp3lame-dev libfdk-aac-dev libass-dev
        sudo ln -s /usr/lib/x86_64-linux-gnu/libmysqlclient.so /usr/lib/x86_64-linux-gnu/libmysqlclient_r.so
        sudo ln -s /usr/lib/x86_64-linux-gnu/libmysqlclient.so /usr/lib/x86_64-linux-gnu/libmysqlclient_r.so.16
        sudo ln -s /usr/lib/x86_64-linux-gnu/libssl.so /usr/lib/x86_64-linux-gnu/libssl.so.10
        sudo ln -s /usr/lib/x86_64-linux-gnu/libcrypto.so /usr/lib/x86_64-linux-gnu/libcrypto.so.10
    - name: build freetype
      run: |
        qmake freetype.pro -spec linux-g++
        make -j$(nproc)
      working-directory: 'OpenBoard-ThirdParty/freetype'
    - name: build quazip
      run: |
        qmake quazip.pro -spec linux-g++
        make -j2
      working-directory: 'OpenBoard-ThirdParty/quazip'
    - name: build xpdf
      run: |
        (cd xpdf-3.04; ./configure --with-freetype2-library="../../freetype/lib/linux" --with-freetype2-includes="../../freetype/freetype-2.6.1/include")
        qmake xpdf.pro -spec linux-g++
        make -j2
      working-directory: 'OpenBoard-ThirdParty/xpdf'
    - name: build OpenBoard-Importer
      run: |
        qmake OpenBoardImporter.pro CONFIG+=release PREFIX=/usr -spec linux-g++-64
        env LD_LIBRARY_PATH=${Qt5_Dir}/lib:${LD_LIBRARY_PATH} make -j2
      working-directory: 'OpenBoard-Importer'
    - name: build OpenBoard main
      run: |
        qmake OpenBoard.pro CONFIG+=release PREFIX=/usr -spec linux-g++-64
        make -j2
        lrelease OpenBoard.pro
      working-directory: 'OpenBoard'
    - name: install target files
      run: |
        make INSTALL_ROOT=appdir install
        mkdir -p appdir/usr/bin ; cp build/linux/release/product/OpenBoard appdir/usr/bin/openboard
        mkdir -p appdir/usr/translations ; cp resources/i18n/*.qm appdir/usr/translations/
        cp -r resources/library appdir/usr/
        cp -r resources/etc appdir/usr/
        cp -r resources/linux/openboard-ubz.xml appdir/usr/etc/
        mkdir -p appdir/usr/importer ; install ../OpenBoard-Importer/OpenBoardImporter appdir/usr/importer/
        mkdir -p appdir/usr/customizations ; cp -r resources/customizations/fonts appdir/usr/customizations/fonts
        mkdir -p appdir/usr/share/icons/hicolor/256x256/apps ; convert resources/images/OpenBoard.png -resize 256x256 appdir/usr/share/icons/hicolor/256x256/apps/OpenBoard.png
        mkdir -p appdir/usr/share/icons/hicolor/64x64/apps ; cp resources/images/OpenBoard.png appdir/usr/share/icons/hicolor/64x64/apps/OpenBoard.png
        rm -rf appdir/home
      working-directory: 'OpenBoard'
    - name: prepare desktop file
      env:
        APPLICATION_CODE: openboard
        APPLICATION_SHORTCUT: appdir/usr/share/applications/openboard.desktop
        APPLICATION_NAME: OpenBoard
        DESCRIPTION: "OpenBoard, an interactive white board application"
      run: |
        mkdir -p appdir/usr/share/applications/
        echo "[Desktop Entry]" > $APPLICATION_SHORTCUT
        echo "Version=1.0" >> $APPLICATION_SHORTCUT
        echo "Name=${APPLICATION_NAME}" >> $APPLICATION_SHORTCUT
        echo "Comment=$DESCRIPTION" >> $APPLICATION_SHORTCUT
        echo "Exec=$APPLICATION_CODE %f" >> $APPLICATION_SHORTCUT
        echo "Icon=${APPLICATION_NAME}" >> $APPLICATION_SHORTCUT
        echo "StartupNotify=true" >> $APPLICATION_SHORTCUT
        echo "Terminal=false" >> $APPLICATION_SHORTCUT
        echo "Type=Application" >> $APPLICATION_SHORTCUT
        echo "Categories=Education;" >> $APPLICATION_SHORTCUT
      working-directory: 'OpenBoard'
    - name: create AppImage
      run: |
        env LD_LIBRARY_PATH=${Qt5_Dir}/lib QMAKE=${Qt5_Dir}/bin/qmake linuxdeploy-x86_64.AppImage ${STD_OPTS} ${LIBS_FLAG} ${ICON_FLAG} ${DESKTOP} -l ${Qt5_Dir}/lib/libQt5Qml.so.5 -l ${Qt5_Dir}/lib/libQt5Quick.so.5 -l ${Qt5_Dir}/lib/libQt5Sensors.so.5 -l ${Qt5_Dir}/lib/libQt5WebChannel.so.5
        find . -name 'OpenBoard-*-x86_64.AppImage'
      env:
        STD_OPTS: --plugin=qt --output=appimage --appdir=appdir
        LIBS_FLAG: -l /usr/lib/x86_64-linux-gnu/libschroedinger-1.0.so.0 -l /usr/lib/x86_64-linux-gnu/libopenjpeg.so.5
        ICON_FLAG: --icon-file=appdir/usr/share/icons/hicolor/256x256/apps/OpenBoard.png
        DESKTOP: --desktop-file=appdir/usr/share/applications/openboard.desktop
        OUTPUT: OpenBoard-${{ steps.vars.outputs.tag }}-x86_64.AppImage
      working-directory: 'OpenBoard'
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ github.workspace }}/OpenBoard/OpenBoard-${{ steps.vars.outputs.tag }}-x86_64.AppImage
        asset_name: OpenBoard-${{ steps.vars.outputs.tag }}-x86_64.AppImage
        asset_content_type: application/x-executable

